{
  "package_name": "com.example_org.my_app",
  "project_description": "This Flutter application is a todo list management system that allows users to create, view, update, and delete todo items. It features a clean and intuitive user interface, with the ability to mark tasks as complete or incomplete. The app also includes various UI components such as dialogs, bottom sheets, and responsive design.",
  "architecture_overview": "The application follows the Stacked architecture, which promotes separation of concerns and testability. It uses Stacked for state management, routing, and dependency injection. The codebase is structured with separate folders for features, UI components, services, and utilities. This organization allows for easy maintainability and extensibility of the application.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/services/storage_service.dart",
      "description": "The StorageService class is responsible for managing the storage and retrieval of todo items in the application. It provides a simple abstraction over the underlying storage mechanism, which could be SharedPreferences, a local database, or a remote API.",
      "class_diagram": "@startuml\nclass StorageService {\n  - final logger: Logger\n  - static const String _todoKey: 'todos'\n\n  + Future<List<Todo>> getTodos()\n  + Future<void> saveTodos(List<Todo> todos)\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves the list of todo items from the underlying storage. For demo purposes, this method returns an empty list, but in a real app it would load the todos from SharedPreferences, a database, or a remote API.",
          "parameters": null,
          "return_type": "Future<List<Todo>>"
        },
        {
          "name": "saveTodos",
          "description": "Saves the provided list of todo items to the underlying storage. This method encodes the todo items to a JSON string and prints it for demonstration purposes.",
          "parameters": [
            "List<Todo> todos"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:convert",
        "package:my_app/models/todo.dart",
        "package:logger/logger.dart",
        "package:flutter/foundation.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/add_todo/add_todo_dialog.dart",
      "description": "This file contains the `AddTodoDialog` class, which is responsible for displaying a modal dialog that allows the user to add a new todo item. The dialog prompts the user to enter a title for the new todo and provides options to either cancel or confirm the addition.",
      "class_diagram": "@startuml\nclass AddTodoDialog extends StatefulWidget {\n  - DialogRequest request\n  - Function(DialogResponse) completer\n  + State<AddTodoDialog> createState()\n}\n\nclass _AddTodoDialogState extends State<AddTodoDialog> {\n  - TextEditingController _controller\n  + void dispose()\n  + Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "createState",
          "description": "Creates the state object for the `AddTodoDialog` widget.",
          "parameters": null,
          "return_type": "State<AddTodoDialog>"
        },
        {
          "name": "dispose",
          "description": "Disposes of the `_controller` text editing controller when the widget is disposed.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "build",
          "description": "Builds the UI for the `AddTodoDialog` widget, which includes a text field for the user to enter a todo title, and buttons to cancel or confirm the addition.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing in the Flutter application. It defines the available routes, maps them to specific views, and provides utility methods to navigate between those views.",
      "class_diagram": "@startuml\nclass StackedRouter {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView route",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView route",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This Dart file is responsible for setting up the dependency injection and service locator for the application. It is a critical part of the application's architecture, as it ensures that dependencies are managed and made available to various parts of the codebase.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the application's dependencies with the service locator. It sets up the environment configuration and registers the necessary services, such as BottomSheetService, DialogService, and NavigationService.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. It serves as a centralized location for managing the application's color palette, promoting consistency and maintainability.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is responsible for managing the state and functionality of the notice bottom sheet component in the application.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n}\n\nNoticeSheetModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "NoticeSheetModel",
          "description": "The constructor for the `NoticeSheetModel` class, which extends the `BaseViewModel` class from the `stacked` package.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is a view model responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -left-|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "N/A",
          "description": "This file does not contain any public methods. The `InfoAlertDialogModel` class is a simple view model that extends `BaseViewModel` from the `stacked` package, providing a base implementation for state management and other common view model functionalities.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system in the application. It defines the available dialog types, registers custom dialog builders, and provides a central entry point for displaying dialogs throughout the app.",
      "class_diagram": "@startuml\n'Dummy class to represent DialogService\nclass DialogService {\n  registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Initializes the dialog system by registering custom dialog builders with the DialogService. This allows the app to display various types of dialogs, such as the InfoAlertDialog.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the application. It uses the Stacked Services library to register custom bottom sheet builders and set up the bottom sheet infrastructure.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  notice\n}\n\nclass NoticeSheet {\n  NoticeSheet(request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService <-- BottomSheetType\nBottomSheetService <-- NoticeSheet\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Configures the BottomSheetService with custom builders for each BottomSheetType. This allows the application to display different types of bottom sheets based on the requested type.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class in this file is responsible for managing the state and behavior of the main application in a Flutter app. It serves as the view model for the app-level functionality, providing a centralized location to handle common app-wide tasks and events.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "n/a",
          "description": "The `AppViewModel` class does not have any public methods. It inherits from the `BaseViewModel` class provided by the `stacked` package, which serves as the base class for view models in the Stacked architecture.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/models/todo.dart",
      "description": "This Dart file defines the `Todo` class, which represents a single task or to-do item in a to-do list application. The `Todo` class encapsulates the core data and functionality of a to-do item, providing a consistent and reusable model for managing tasks throughout the application.",
      "class_diagram": "@startuml\nclass Todo {\n  +String id\n  +String title\n  +bool isCompleted\n  +DateTime createdAt\n  +Todo copyWith()\n  +Map<String, dynamic> toJson()\n  +factory Todo.fromJson()\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new `Todo` instance with the specified changes, allowing for partial updates to an existing `Todo` object.",
          "parameters": [
            "String? id",
            "String? title",
            "bool? isCompleted",
            "DateTime? createdAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "toJson",
          "description": "Converts the `Todo` instance to a JSON-compatible map, allowing for easy serialization and transmission of `Todo` data.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Constructs a new `Todo` instance from a JSON map, allowing for easy deserialization of `Todo` data.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "Todo"
        }
      ],
      "dependencies": [
        "equatable"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "This file defines the NoticeSheet class, which is responsible for displaying a bottom sheet with a notice message. The sheet provides a simple way to show important information to the user, such as system updates or alerts.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  +NoticeSheet(completer, request)\n  +builder(context, viewModel, child)\n  +viewModelBuilder(context)\n}\n\nNoticeSheet --> NoticeSheetModel\nNoticeSheet --> SheetRequest\nNoticeSheet --> SheetResponse\n\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the notice sheet, displaying the title and description provided in the SheetRequest.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates a new instance of the NoticeSheetModel, which provides the view model for the notice sheet.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_repository.dart",
      "description": "The TodoRepository class is responsible for managing the persistence and retrieval of todo items in the application. It serves as the central hub for all CRUD (Create, Read, Update, Delete) operations on todo items, ensuring the consistency and reliability of the todo data.",
      "class_diagram": "@startuml\nclass TodoRepository {\n  -StorageService _storageService\n  +Future<List<Todo>> getTodos()\n  +Future<void> saveTodos(List<Todo> todos)\n  +Future<void> addTodo(Todo todo)\n  +Future<void> updateTodo(Todo todo)\n  +Future<void> deleteTodo(String id)\n  +Future<void> toggleTodoCompletion(String id)\n}\n\nTodoRepository o-- StorageService\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves the list of all todo items from the storage service.",
          "parameters": [],
          "return_type": "Future<List<Todo>>"
        },
        {
          "name": "saveTodos",
          "description": "Persists the provided list of todo items to the storage service.",
          "parameters": [
            "List<Todo> todos"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the list of todos and persists the updated list to the storage service.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the list of todos and persists the updated list to the storage service.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the list of todos and persists the updated list to the storage service.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a todo item in the list of todos and persists the updated list to the storage service.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/models/todo.dart",
        "my_app/services/storage_service.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_item.dart",
      "description": "The TodoItem widget is responsible for rendering a single todo item in a list. It handles the presentation and interaction of a todo task, including marking it as completed and deleting it.",
      "class_diagram": "@startuml\nclass TodoItem {\n  -Todo todo\n  -VoidCallback onToggle\n  -VoidCallback onDelete\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI representation of a single todo item, including a checkbox to toggle its completion status and a delete button.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/models/todo.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_viewmodel.dart",
      "description": "The `TodoViewModel` class is responsible for managing the state and business logic related to a todo list application. It acts as the ViewModel in the Model-View-ViewModel (MVVM) architectural pattern, decoupling the UI logic from the underlying data and services.",
      "class_diagram": "@startuml\nclass TodoViewModel {\n  - _todoRepository: TodoRepository\n  - _dialogService: DialogService\n  - _todos: List<Todo>\n  + todos: List<Todo>\n  + initialize()\n  + loadTodos()\n  + addTodo()\n  + toggleTodoComplete(String id)\n  + deleteTodo(String id)\n}\n\nclass TodoRepository {\n  + getTodos(): Future<List<Todo>>\n  + addTodo(Todo todo): Future<void>\n  + toggleTodoCompletion(String id): Future<void>\n  + deleteTodo(String id): Future<void>\n}\n\nclass DialogService {\n  + showCustomDialog(DialogType variant, {String title, String description}): Future<DialogResponse>\n}\n\nclass Todo {\n  + id: String\n  + title: String\n  + createdAt: DateTime\n  + completed: bool\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the view model by loading the todos from the repository and setting the busy state.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "loadTodos",
          "description": "Retrieves the list of todos from the repository and notifies the listeners of the updated state.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "addTodo",
          "description": "Displays a dialog to the user to enter a new todo title, creates a new `Todo` object, and adds it to the repository.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoComplete",
          "description": "Updates the completion status of a todo in the repository and refreshes the todo list.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Displays a confirmation dialog to the user, and if confirmed, deletes the specified todo from the repository and refreshes the todo list.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/features/todo/todo_repository.dart",
        "my_app/models/todo.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_view.dart",
      "description": "The `TodoView` file is responsible for rendering the main Todo List screen of the application. It provides the user interface for managing a list of todo items, including the ability to add, toggle the completion status, and delete individual tasks.",
      "class_diagram": "@startuml\nclass TodoView {\n  + builder(BuildContext, TodoViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): TodoViewModel\n  + onViewModelReady(TodoViewModel): void\n}\n\nclass TodoViewModel {\n  + todos: List<Todo>\n  + isBusy: bool\n  + toggleTodoComplete(String): void\n  + deleteTodo(String): void\n  + addTodo(): void\n  + initialize(): void\n}\n\nclass TodoItem {\n  + todo: Todo\n  + onToggle(): void\n  + onDelete(): void\n}\n\nTodoView *-- TodoViewModel\nTodoView o-- TodoItem\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the main UI for the TodoView, including the app bar, the list of todo items, and the floating action button to add new tasks.",
          "parameters": [
            "BuildContext",
            "TodoViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates a new instance of the TodoViewModel, which provides the business logic and data for the TodoView.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "TodoViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the TodoViewModel when the TodoView is first loaded, triggering the retrieval of the todo items.",
          "parameters": [
            "TodoViewModel"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/todo/todo_viewmodel.dart",
        "package:my_app/features/todo/widgets/todo_item.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file contains a set of utility functions and constants that provide commonly used UI helpers and layout utilities for a Flutter application. It serves as a centralized location for managing and sharing reusable UI-related functionality across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  +static const double _tinySize\n  +static const double _smallSize\n  +static const double _mediumSize\n  +static const double _largeSize\n  +static const double _massiveSize\n\n  +static const Widget horizontalSpaceTiny\n  +static const Widget horizontalSpaceSmall\n  +static const Widget horizontalSpaceMedium\n  +static const Widget horizontalSpaceLarge\n\n  +static const Widget verticalSpaceTiny\n  +static const Widget verticalSpaceSmall\n  +static const Widget verticalSpaceMedium\n  +static const Widget verticalSpaceLarge\n  +static const Widget verticalSpaceMassive\n\n  +static Widget spacedDivider\n  +static Widget verticalSpace(double height)\n  +static double screenWidth(BuildContext context)\n  +static double screenHeight(BuildContext context)\n  +static double screenHeightFraction(BuildContext context, {int dividedBy=1, double offsetBy=0, double max=3000})\n  +static double screenWidthFraction(BuildContext context, {int dividedBy=1, double offsetBy=0, double max=3000})\n  +static double halfScreenWidth(BuildContext context)\n  +static double thirdScreenWidth(BuildContext context)\n  +static double quarterScreenWidth(BuildContext context)\n  +static double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  +static double getResponsiveSmallFontSize(BuildContext context)\n  +static double getResponsiveMediumFontSize(BuildContext context)\n  +static double getResponsiveLargeFontSize(BuildContext context)\n  +static double getResponsiveExtraLargeFontSize(BuildContext context)\n  +static double getResponsiveMassiveFontSize(BuildContext context)\n  +static double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "verticalSpace",
          "description": "Provides a vertical space with a specified height.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Retrieves the width of the screen in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Retrieves the height of the screen in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Calculates a fraction of the screen height based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy=1",
            "double offsetBy=0",
            "double max=3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "Calculates a fraction of the screen width based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy=1",
            "double offsetBy=0",
            "double max=3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "Calculates half the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "Calculates a third of the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "Calculates a quarter of the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Calculates a responsive horizontal space medium size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Calculates a responsive small font size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "Calculates a responsive medium font size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "Calculates a responsive large font size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "Calculates a responsive extra-large font size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "Calculates a responsive massive font size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Calculates a responsive font size based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "dart:math"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file contains the implementation of the `InfoAlertDialog` class, which is responsible for displaying a custom dialog with an informative alert message. This dialog is commonly used to provide users with important information or notifications within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +InfoAlertDialog(request: DialogRequest, completer: Function(DialogResponse))\n  +builder(context: BuildContext, viewModel: InfoAlertDialogModel, child: Widget): Widget\n  +viewModelBuilder(context: BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog --> InfoAlertDialogModel : uses\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialog",
          "description": "The constructor for the `InfoAlertDialog` class. It takes in a `DialogRequest` object and a `completer` function as parameters. The `DialogRequest` object contains the title and description of the alert message to be displayed.",
          "parameters": [
            "request",
            "completer"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for creating the UI of the dialog. It takes in the `BuildContext`, the `InfoAlertDialogModel` instance, and an optional `child` widget as parameters. It returns the final `Widget` to be displayed in the dialog.",
          "parameters": [
            "context",
            "viewModel",
            "child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating the `InfoAlertDialogModel` instance, which is used to hold any necessary state or logic for the dialog.",
          "parameters": [
            "context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/confirmation/confirmation_dialog.dart",
      "description": "The ConfirmationDialog class is responsible for displaying a simple confirmation dialog to the user, allowing them to confirm or cancel an action. This dialog is typically used when the application needs to get user confirmation before performing a potentially destructive or irreversible operation.",
      "class_diagram": "@startuml\nclass ConfirmationDialog {\n  +final DialogRequest request\n  +final Function(DialogResponse) completer\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the confirmation dialog, displaying the title, description, and cancel/confirm buttons.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant AppView\nparticipant TodoView\nparticipant TodoViewModel\nparticipant TodoRepository\nparticipant StorageService\nparticipant DialogService\n\nUser -> AppView: Launch app\nAppView -> TodoView: Initialize\nTodoView -> TodoViewModel: Load todos\nTodoViewModel -> TodoRepository: getTodos()\nTodoRepository -> StorageService: getTodos()\nStorageService --> TodoRepository: List<Todo>\nTodoRepository --> TodoViewModel: List<Todo>\nTodoViewModel --> TodoView: Display todos\n\nUser -> TodoView: Add todo\nTodoView -> DialogService: Show add todo dialog\nDialogService --> TodoView: DialogResponse\nTodoView -> TodoViewModel: addTodo()\nTodoViewModel -> TodoRepository: addTodo()\nTodoRepository -> StorageService: saveTodos()\nStorageService --> TodoRepository: Void\nTodoRepository --> TodoViewModel: Void\nTodoViewModel --> TodoView: Update todo list\n\nUser -> TodoView: Toggle todo completion\nTodoView -> TodoViewModel: toggleTodoComplete(id)\nTodoViewModel -> TodoRepository: toggleTodoCompletion(id)\nTodoRepository -> StorageService: saveTodos()\nStorageService --> TodoRepository: Void\nTodoRepository --> TodoViewModel: Void\nTodoViewModel --> TodoView: Update todo list\n\nUser -> TodoView: Delete todo\nTodoView -> TodoViewModel: deleteTodo(id)\nTodoViewModel -> DialogService: Show delete confirmation dialog\nDialogService --> TodoViewModel: DialogResponse\nTodoViewModel -> TodoRepository: deleteTodo(id)\nTodoRepository -> StorageService: saveTodos()\nStorageService --> TodoRepository: Void\nTodoRepository --> TodoViewModel: Void\nTodoViewModel --> TodoView: Update todo list\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each view (e.g., TodoView) has a corresponding view model (e.g., TodoViewModel) that manages the state and business logic. The view models interact with the TodoRepository to perform CRUD operations on the todo items, which are stored using the StorageService (e.g., SharedPreferences, local database, or remote API). The view models also handle UI-specific state, such as loading and error states, and notify the views of changes using the `notifyListeners` method provided by the Stacked package.",
  "navigation_flow": "The application's navigation is handled using the Stacked Router, which is defined in the app.router.dart file. The router defines the available routes, maps them to specific views, and provides utility methods to navigate between those views. The main entry point of the application is the AppView, which initializes the Stacked architecture and displays the StartupView. After completing the startup logic, the StartupView navigates to the TodoView, which is the main screen of the application. Additional navigation, such as opening dialogs or bottom sheets, is handled through the DialogService and BottomSheetService provided by the Stacked Services library."
}